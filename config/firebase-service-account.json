import 'dart:io';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_pdfview/flutter_pdfview.dart';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';

import '../utils/labelKeys.dart';
import '../utils/uiUtils.dart';
import 'widgets/customAppbar.dart';

class PDFViewerScreen extends StatefulWidget {
  final int? id;

  const PDFViewerScreen({Key? key, this.id}) : super(key: key);

  // Static route method to navigate
  static Route route(RouteSettings routeSettings) {
    return CupertinoPageRoute(
      builder: (_) => PDFViewerScreen(
        id: routeSettings.arguments as int, // Passing the argument correctly
      ),
    );
  }

  @override
  _PDFViewerScreenState createState() => _PDFViewerScreenState();
}

class _PDFViewerScreenState extends State<PDFViewerScreen> {
  String? pdfPath;
  bool isLoading = true;

  // Function to fetch PDF from the API and save it locally
  Future<void> fetchAndDisplayPDF() async {
    try {
      // Fetch the PDF file from API
      final response = await http.get(
        Uri.parse('http://192.168.43.127/school/public/api/fee-card?id=${widget
            .id}'), // Replace with your API endpoint
      );

      if (response.statusCode == 200) {
        // Save the PDF file locally in the app's temporary directory
        final bytes = response.bodyBytes;
        final tempDir = await getTemporaryDirectory();
        final file = File('${tempDir.path}/fee_card.pdf');
        await file.writeAsBytes(bytes);

        // Update the path and state to display the PDF
        setState(() {
          pdfPath = file.path;
          isLoading = false; // Set loading to false after fetching
        });
      } else {
        _showErrorDialog('Failed to fetch PDF: ${response.body}');
      }
    } catch (e) {
      _showErrorDialog('Error: $e');
    }
  }

  // Error dialog if something goes wrong
  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: Text('Error'),
            content: Text(message),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('OK'),
              ),
            ],
          ),
    );
  }

  @override
  void initState() {
    super.initState();
    // Fetch the PDF as soon as the screen is loaded
    fetchAndDisplayPDF();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(60.0), // Adjust this height as needed
        child: CustomAppBar(
          title: UiUtils.getTranslatedLabel(context, privacyPolicyKey),
        ),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator()) // Show loading indicator
          : pdfPath == null
          ? Center(child: Text('No PDF available')) // If no PDF was fetched
          : PDFView( // Display the PDF directly
        filePath: pdfPath,
      ),
    );
  }
}
